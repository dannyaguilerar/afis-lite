// <auto-generated />
using System;
using AfisLite.Broker.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AfisLite.Broker.Infra.Migrations
{
    [DbContext(typeof(AfisLiteDbContext))]
    [Migration("20230705062024_latest-changes-date")]
    partial class latestchangesdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AfisLite.Broker.Core.EnrolmentAggregate.Enrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Enrolments");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.FingerprintAggregate.Fingerprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EnrolmentId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Template")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnrolmentId");

                    b.ToTable("Fingerprints");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.PersonAggregate.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.SearchAggregate.Search", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int?>("MatchPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.VerifyAggregate.Verify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("integer");

                    b.Property<int>("CandidatePersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Verifies");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.EnrolmentAggregate.Enrolment", b =>
                {
                    b.HasOne("AfisLite.Broker.Core.PersonAggregate.Person", "Person")
                        .WithMany("Enrolments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.FingerprintAggregate.Fingerprint", b =>
                {
                    b.HasOne("AfisLite.Broker.Core.EnrolmentAggregate.Enrolment", "Enrolment")
                        .WithMany("Fingerprints")
                        .HasForeignKey("EnrolmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrolment");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.SearchAggregate.Search", b =>
                {
                    b.HasOne("AfisLite.Broker.Core.PersonAggregate.Person", "Match")
                        .WithMany("Searches")
                        .HasForeignKey("MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.VerifyAggregate.Verify", b =>
                {
                    b.HasOne("AfisLite.Broker.Core.PersonAggregate.Person", "Candidate")
                        .WithMany("Verifies")
                        .HasForeignKey("CandidateId");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.EnrolmentAggregate.Enrolment", b =>
                {
                    b.Navigation("Fingerprints");
                });

            modelBuilder.Entity("AfisLite.Broker.Core.PersonAggregate.Person", b =>
                {
                    b.Navigation("Enrolments");

                    b.Navigation("Searches");

                    b.Navigation("Verifies");
                });
#pragma warning restore 612, 618
        }
    }
}
